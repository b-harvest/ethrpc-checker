package main

import (
	"flag"
	"log"
	"os"
	"strings"

	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
)

// Copy compiled contract bytecode
const ContractByteCode = ""

func main() {
	verbose := flag.Bool("v", false, "Enable verbose output")
	outputExcel := flag.Bool("xlsx", false, "Save output as xlsx")
	flag.Parse()

	// Load configuration from config.yaml
	config := MustLoadConfig("config.yaml")

	rCtx, err := NewContext(config)
	if err != nil {
		log.Fatalf("Failed to create context: %v", err)
	}

	rCtx = MustLoadContractInfo(rCtx)

	// Collect json rpc results
	var results []*RpcResult

	rpcs := []struct {
		name RpcName
		test RpcCall
	}{
		{SendRawTransaction, RpcSendRawTransactionTransferValue},
		{SendRawTransaction, RpcSendRawTransactionDeployContract},
		{SendRawTransaction, RpcSendRawTransactionTransferERC20},
		{GetBlockNumber, RpcGetBlockNumber},
		{GetGasPrice, RpcGetGasPrice},
		{GetMaxPriorityFeePerGas, RpcGetMaxPriorityFeePerGas},
		{GetChainId, RpcGetChainId},
		{GetBalance, RpcGetBalance},
		{GetTransactionCount, RpcGetTransactionCount},
		{GetBlockByHash, RpcGetBlockByHash},
		{GetBlockByNumber, RpcGetBlockByNumber},
		{GetBlockReceipts, RpcGetBlockReceipts},
		{GetTransactionByHash, RpcGetTransactionByHash},
		{GetTransactionByBlockHashAndIndex, RpcGetTransactionByBlockHashAndIndex},
		{GetTransactionByBlockNumberAndIndex, RpcGetTransactionByBlockNumberAndIndex},
		{GetTransactionReceipt, RpcGetTransactionReceipt},
		{GetTransactionCountByHash, RpcGetTransactionCountByHash},
		{GetBlockTransactionCountByHash, RpcGetBlockTransactionCountByHash},
		{GetCode, RpcGetCode},
		{GetStorageAt, RpcGetStorageAt},
		{NewFilter, RpcNewFilter},
		{GetFilterLogs, RpcGetFilterLogs},
		{NewBlockFilter, RpcNewBlockFilter},
		{GetFilterChanges, RpcGetFilterChanges},
		{UninstallFilter, RpcUninstallFilter},
		{GetLogs, RpcGetLogs},
	}

	for _, r := range rpcs {
		_, err := r.test(rCtx)
		if err != nil {
			// add error to results
			results = append(results, &RpcResult{
				Method: r.name,
				Status: Error,
				ErrMsg: err.Error(),
			})
			continue
		}
	}
	results = append(results, rCtx.AlreadyTestedRPCs...)

	ReportResults(results, *verbose, *outputExcel)
}

func MustLoadContractInfo(rCtx *RpcContext) *RpcContext {
	// Read the ABI file
	abiFile, err := os.ReadFile("ERC20Token.abi")
	if err != nil {
		log.Fatalf("Failed to read ABI file: %v", err)
	}
	// Parse the ABI
	parsedABI, err := abi.JSON(strings.NewReader(string(abiFile)))
	if err != nil {
		log.Fatalf("Failed to parse ERC20 ABI: %v", err)
	}
	rCtx.ERC20Abi = &parsedABI
	// Read the compiled contract bytecode
	bytecode, err := os.ReadFile("ERC20Token.bin")
	if err != nil {
		log.Fatalf("Failed to read contract bytecode: %v", err)
	}
	// Decode the hex string to bytes
	contractBytecode := common.FromHex(string(bytecode))
	rCtx.ERC20ByteCode = contractBytecode

	return rCtx
}
